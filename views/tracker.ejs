<!DOCTYPE html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Budget App</title>
    <!-- Font Awesome Icons -->
</head>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" />
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap" rel="stylesheet" />
<!-- Stylesheet -->
<link rel="stylesheet" href="./../public/css/Tracker.css" />
</head>
<style>
    * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
    }

    body {
        background-color: #f7f9fd;
    }

    .main-container {
        display: flex;
    }

    /* .dataVisual{
        /* border: 2px solid red; */
    /* } */
    .wrapper {
        width: 45%;
        margin-left: 5%;
        margin-top: 1.5rem;
        font-size: 16px;
        max-width: 43.75em;
        /* margin: 1em auto; */

    }

    .container {
        width: 100%;
    }

    .sub-container {
        width: 100%;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 3em;
    }

    .flex {
        display: flex;
        align-items: center;
    }

    .flex-space {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .wrapper h3 {
        color: #363d55;
        font-weight: 500;
        margin-bottom: 0.6em;
    }

    .container input {
        display: block;
        width: 100%;
        padding: 0.6em 0.3em;
        border: 1px solid #d0d0d0;
        border-radius: 0.3em;
        color: #414a67;
        outline: none;
        font-weight: 400;
        margin-bottom: 0.6em;
    }

    .container input:focus {
        border-color: #587ef4;
    }

    #category {
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 200px;
    }

    /* Style for the options within the dropdown */
    #category option {
        padding: 5px;
    }

    /* Style for the selected option */
    #category option:checked {
        background-color: #f0f0f0;
        color: #333;
    }

    /* Style for the dropdown arrow */
    #category::-ms-expand {
        display: none;
    }

    .total-amount-container,
    .user-amount-container {
        background-color: #ffffff;
        padding: 1.25em 0.9em;
        border-radius: 0.3em;
        box-shadow: 0 0.6em 1.2em rgba(28, 0, 80, 0.06);
    }

    .output-container {
        background-color: #587ef4;
        color: #ffffff;
        border-radius: 0.3em;
        box-shadow: 0 0.6em 1.2em rgba(28, 0, 80, 0.06);
        margin: 2em 0;
        padding: 1.2em;
    }

    .output-container p {
        font-weight: 500;
        margin-bottom: 0.6em;
    }

    .output-container span {
        display: block;
        text-align: center;
        font-weight: 400;
        color: #e5e5e5;
    }

    .submit {
        font-size: 1em;
        margin-top: 0.8em;
        background-color: #587ef4;
        border: none;
        outline: none;
        color: #ffffff;
        padding: 0.6em 1.2em;
        border-radius: 0.3em;
        cursor: pointer;
    }

    .list {
        background-color: #ffffff;
        padding: 1.8em 1.2em;
        box-shadow: 0 0.6em 1.2em rgba(28, 0, 80, 0.06);
        border-radius: 0.6em;

    }

    .sublist-content {
        width: 100%;
        border-left: 0.3em solid #587ef4;
        margin-bottom: 0.6em;
        padding: 0.5em 1em;
        display: grid;
        grid-template-columns: 3fr 2fr 1fr 1fr;
    }

    .product {
        font-weight: 500;
        color: #363d55;
    }

    .amount {
        color: #414a67;
        margin-left: 20%;
    }

    .icons-container {
        width: 5em;
        margin: 1.2em;
        align-items: center;
    }

    .product-title {
        margin-bottom: 1em;
    }

    .hide {
        display: none;
    }

    .error {
        color: #ff465a;
    }

    .edit {
        margin-left: auto;
    }

    .edit,
    .delete {
        background: transparent;
        cursor: pointer;
        margin-right: 1.5em;
        border: none;
        color: #587ef4;
    }

    .dataVisual {
        margin-top: 5rem;
        margin-left: 2rem;
        width: 45%;
        /* border: 2px solid red; */
        display: inline-block;
    }

    /* #category option i{
        width: 50px;
    } */

    @media screen and (max-width: 600px) {
        .wrapper {
            font-size: 14px;
        }

        .sub-container {
            grid-template-columns: 1fr;
            gap: 1em;
        }
    }
</style>








































<body>
    <div class="main-container">
        <div class="wrapper">
            <div class="container">
                <div class="sub-container">
                    <!-- Budget -->
                    <div class="total-amount-container">
                        <h3>Budget</h3>
                        <p class="hide error" id="budget-error">
                            Value cannot be empty or negative
                        </p>
                        <input type="number" id="total-amount" placeholder="Enter Total Amount" />
                        <button class="submit" id="total-amount-button" style="display: block;">Set Budget</button>
                        <!-- <button class="submit" id="total-amount-button" style="display: block;" onclick="AddMoreBudjet()">Add More Budget</button> -->
                        <button class="submit" id="total-amount-button  Graph" onclick="GraphMaker(this)">Line</button>
                        <button class="submit" id="total-amount-button  Graph" onclick="GraphMaker(this)">Bar</button>
                        <button class="submit" id="total-amount-button  Graph"
                            onclick="GraphMaker(this)">Piechart</button>
                    </div>
                    <!-- Expenditure -->
                    <div class="user-amount-container">
                        <h3>Expenses</h3>
                        <p class="hide error" id="product-title-error">
                            Values cannot be empty
                        </p>
                        <input type="text" class="product-title" id="product-title"
                            placeholder="Enter Title of Product" />
                        <input type="number" id="user-amount" placeholder="Enter Cost of Product" />
                        <select id="category">
                            <option value="fa-house"> Home</option>
                            <option value="fa-bowl-food">Food</option>
                            <option value="fa-car">Car</option>
                            <option value="fa-dog">Pets</option>
                            <option value="fa-shirt">Clothes</option>
                            <option value="fa-notes medical">Health</option>
                            <option value="fa-train">Travel</option>
                            <option value="fa-utensils">Eating Out</option>
                            <option value="fa-Gifts">Gifts</option>
                            <option value="fa-book">Books</option>
                            <!-- Add more options as needed -->
                        </select>
                        <button class="submit" id="check-amount">Check Amount</button>
                    </div>
                </div>
                <!-- Output -->
                <div class="output-container flex-space">
                    <div>
                        <p>Total Budget</p>
                        <span id="amount">0</span>
                    </div>
                    <div>
                        <p>Expenses</p>
                        <span id="expenditure-value">0</span>
                    </div>
                    <div>
                        <p>Balance</p>
                        <span id="balance-amount">0</span>
                    </div>
                </div>
            </div>
            <!-- List -->
            <div class="list">
                <h3>Expense List</h3>
                <div class="list-container" id="list"></div>
            </div>
        </div>
        <div class="dataVisual">
            <canvas id="Data" width="200px"></canvas>
            <!-- <canvas id="doughnutChart" width="200px" style="display: none;"></canvas>
            <canvas id="lineChart" width="200px" style="display: none;"></canvas> -->
        </div>
    </div>
    </div>
</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>

</html>























































<script src="path/to/chartjs/dist/chart.umd.js"></script>
<script>

    const Canvas_Chart = document.getElementById('Data')

    let totalAmount = document.getElementById("total-amount");
    let categorys = document.getElementById('category')
    let userAmount = document.getElementById("user-amount");
    const checkAmountButton = document.getElementById("check-amount");
    const totalAmountButton = document.getElementById("total-amount-button");
    const productTitle = document.getElementById("product-title");
    const errorMessage = document.getElementById("budget-error");
    const productTitleError = document.getElementById("product-title-error");
    const productCostError = document.getElementById("product-cost-error");
    const amount = document.getElementById("amount");
    const expenditureValue = document.getElementById("expenditure-value");
    const balanceValue = document.getElementById("balance-amount");
    const list = document.getElementById("list");
    const selectedOption = undefined;
    let ExistingEntry = []
    let tempAmount = 0;
    // Charts Thats Change Dynamically
    const CTX = new Chart("Data", {
        type: 'bar',
        data: {
            labels: [],
            datasets: [{
                label: 'Expense Data',
                data: [],
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                title: {
                    display: true,
                    text: 'Monthly Expenses',
                    font: {
                        family: 'Arial',
                        size: 20,
                        weight: 'bold'
                    }
                }
            },
            scales: {
                y: { // defining min and max so hiding the dataset does not change scale range
                    min: 0,
                    max: 1000
                }
            }
        }
    });


    let i = 0;
    let Expense_Info = [
        {
            Home: [],
            Food: [],
            Clothes: [],
            Car: [],
            Pets: [],
            Health: [],
            Travel: [],
            Gifts: [],
            EatingOut: []

        }
    ]
    //Set Budget Part
    totalAmountButton.addEventListener("click", () => {
        console.log(tempAmount)
        tempAmount = tempAmount + parseInt(totalAmount.value);

        //empty or negative input
        if (tempAmount === "" || tempAmount < 0) {
            errorMessage.classList.remove("hide");
        } else {
            errorMessage.classList.add("hide");
            //Set Budget
            console.log(amount)
            amount.innerHTML = tempAmount;



        }
    });
    //Function To Disable Edit and Delete Button
    const disableButtons = (bool) => {
        let editButtons = document.getElementsByClassName("edit");
        Array.from(editButtons).forEach((element) => {
            element.disabled = bool;
        });
    };
    //Function To Modify List Elements
    const modifyElement = (element, edit = false) => {
        let parentDiv = element.parentElement;
        let currentBalance = balanceValue.innerText;
        let RemoveElement=parentDiv.getAttribute("data-category")
            for(let i of ExistingEntry){
                if(i.Category==RemoveElement){
              let Remove_Element_Index_Value=ExistingEntry.indexOf(i)
              
              let removed_Element=ExistingEntry.pop(RemoveElement)
              console.log(ExistingEntry)
              console.log(removed_Element)
              break;
            }
        }
        let currentExpense = expenditureValue.innerText;
        let parentAmount = parentDiv.querySelector(".amount").innerText;
        let parentText;
        parentText = parentDiv.querySelector(".product").innerText;
        if (edit) {

            productTitle.value = parentText;
            userAmount.value = parentAmount;
            disableButtons(true);
        }

        balanceValue.innerText = parseInt(currentBalance) + parseInt(parentAmount);
        expenditureValue.innerText =
            parseInt(currentExpense) - parseInt(parentAmount);
        parentDiv.remove();
    };
    //Function To Create List
    const listCreator = (expenseName, expenseValue) => {
    const selectedOption = categorys.options[categorys.selectedIndex].text;
    const Time = new Date();
    const Day = `${Time.getDate()}/${Time.getMonth()}/${Time.getFullYear()}`;
        console.log(`this is all the array element for the first time ${ExistingEntry}`)
    // Find the index of the existing entry in ExistingEntry array
    let existingEntryIndex = ExistingEntry.findIndex(entry => entry.Category === selectedOption);
    if (existingEntryIndex !== -1) {
        // If an entry exists, update it
        ExistingEntry[existingEntryIndex].Cost += parseFloat(expenseValue);
        ExistingEntry[existingEntryIndex].Note = expenseName;
        console.log(ExistingEntry)
        // Find the corresponding sublist content associated with the updated entry
        let sublistContent = document.querySelector(`.sublist-content[data-category="${selectedOption}"]`);
        
        // Update the elements within the sublist content
        let productNameElement = sublistContent.querySelector(".product");
        let productCostElement = sublistContent.querySelector(".amount");
        
        productNameElement.innerText = expenseName;
        productCostElement.innerText = ExistingEntry[existingEntryIndex].Cost.toFixed(2);
        console.log(`This is value got same so that now Array is ${ExistingEntry}`)
    } else {
        // If no entry exists, create a new one
        ExistingEntry.push({ Category: selectedOption, Note: expenseName, Cost: parseFloat(expenseValue), DateAndTime: Day });
        console.log(ExistingEntry);

        // Create sublist content for the new entry
        let sublistContent = document.createElement("div");
        sublistContent.classList.add("sublist-content", "flex-space");
        sublistContent.setAttribute("data-category", selectedOption);

        // Create container for icon and note
        const iconNoteContainer = document.createElement("div");
        iconNoteContainer.classList.add("flex");

        // Create icon element for the home icon
        const Itmes = document.createElement("i");
        Itmes.classList.add("fa-solid", categorys.value, "Home");
        Itmes.style.fontSize = "1.2em";
        Itmes.style.color = "#587ef4";
        iconNoteContainer.appendChild(Itmes);

        // Create expense note element
        const expenseNote = document.createElement("p");
        expenseNote.classList.add("product");
        expenseNote.innerText = `    ${expenseName}`;
        expenseNote.style.marginLeft = "5px"; // Add left margin to create space between the icon and the note
        iconNoteContainer.appendChild(expenseNote);

        // Create expense value element
        const expenseAmount = document.createElement("p");
        expenseAmount.classList.add("amount");
        expenseAmount.innerText = expenseValue;

        // Create edit button
        let editButton = document.createElement("button");
        editButton.classList.add("fa-solid", "fa-pen-to-square", "edit");
        editButton.style.fontSize = "1.2em";
        editButton.addEventListener("click", () => {
            modifyElement(editButton, true);
        });

        // Create delete button
        let deleteButton = document.createElement("button");
        deleteButton.classList.add("fa-solid", "fa-trash-can", "delete");
        deleteButton.style.fontSize = "1.2em";
        deleteButton.addEventListener("click", () => {
           
             let existingEntryIndex = ExistingEntry.findIndex(entry => entry.Category === selectedOption);
            console.log()
            modifyElement(deleteButton);
        });

        // Append elements to sublist content
        sublistContent.appendChild(iconNoteContainer);
        sublistContent.appendChild(expenseAmount);
        sublistContent.appendChild(editButton);
        sublistContent.appendChild(deleteButton);

        // Append sublist content to the list
        document.getElementById("list").appendChild(sublistContent);
    }
};

    //Function To Add Expenses
    checkAmountButton.addEventListener("click", () => {
        //empty checks
        if (!userAmount.value || !productTitle.value) {
            productTitleError.classList.remove("hide");
            return false;
        }
        //Enable buttons
        disableButtons(false);
        //Expense
        let expenditure = parseInt(userAmount.value);
        //Total expense (existing + new)
        let sum = parseInt(expenditureValue.innerText) + expenditure;
        expenditureValue.innerText = sum;
        //Total balance(budget - total expense)
        const totalBalance = tempAmount - sum;
        balanceValue.innerText = totalBalance;
        //Create list
        listCreator(productTitle.value, userAmount.value);
        //Empty inputs
        productTitle.value = "";
        userAmount.value = "";
    });


    function GraphMaker(text) {
        console.log('GraphMaker Fuction')
        if (i % 2 == 0) {

            if (text.innerText == 'Bar') {
                CTX.config.type = 'bar'
                CTX.config.options.scales.yAxes[0].display = true
                CTX.config.options.scales.xAxes[0].display = true
                CTX.update()


            }
            else if (text.innerText == 'Line') {
                CTX.config.type = 'line'
                CTX.config.options.scales.yAxes[0].display = true
                CTX.config.options.scales.xAxes[0].display = true
                CTX.update()
            }
            else if (text.innerText == 'Piechart') {
                CTX.config.type = 'doughnut'
                CTX.config.options.scales.yAxes[0].display = false
                CTX.config.options.scales.xAxes[0].display = false
                console.log(CTX.config)
                CTX.update()
            }
        }
        else { Data.style.display = 'none'; i += 1; }





    }
    function FetchData(Money_Waste, options, Budget) {
        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }


        // Push data to the chart dataset
        CTX.data.labels.push(options);
        let labelsArr = []
        labelsArr.push(options)
        console.log(labelsArr)
        console.log(CTX.data.labels)
        CTX.data.datasets[0].data.push(Money_Waste);

        // Ensure backgroundColor is an array
        if (!Array.isArray(CTX.data.datasets[0].backgroundColor)) {
            CTX.data.datasets[0].backgroundColor = [];
        }

        // Generate a random color for the new bar
        const color = getRandomColor();

        // Add the random color to the backgroundColor array
        CTX.data.datasets[0].backgroundColor.push(color);

        // Update the chart
        CTX.update(); // Update the chart

    }
    function RemoveData(options, Money_Waste) {
        console.log('jsyt enteered this block of code')
        CTX.data.labels.pop(options)
        CTX.data.datasets[0].data.pop(Money_Waste)
        CTX.update({
            duration: 800, // Duration of the animation in milliseconds
            easing: 'easeInOutQuart' // Easing function for the animation
        });
    }

</script>