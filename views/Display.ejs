<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap" rel="stylesheet">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap" rel="stylesheet" />

<style>
  body {
  margin: 0;
  font-family: 'Courier New', Courier, monospace;
}

.main-container {
  display: flex;
  flex-direction: column;
  width: 100vw;
  height: 100vh;
  /* background-color: #f5f5f5; */
}

/* Header */
header {
  background-color: #587ef4;
  color: #ffffff;
  padding: 1rem 2rem;
  text-align: center;
}

h1 {
  font-size: 1.6rem;
  margin: 0;
}

/* Main Content */
main {
  display: flex;
  flex-grow: 1;
  padding: 1rem;
}

/* Graph Side */
.graph-side {
  /* border: 2px solid red; */
  margin-top: -1rem;
  flex: 1;
  /* background-color: #f0f0f0; */
  border-radius: 5px;
  padding: 1rem;
}

/* Info Side */
.info-side {
 
  flex: 1;
  display: flex;
  flex-direction: column;
  background-color: #fff;
  border-radius: 5px;
  padding: 1rem;
}

/* Title Section */
.title-section {
  font-family: "Poppins", sans-serif;
  font-weight: 400;
  font-size: .5rem;
  font-style: normal;
}

/* Filter Section */
.filter-section {
  display: flex; /* Use flexbox for even spacing */
  justify-content:center; /* Distribute buttons evenly */
  margin-top: 1.2rem;
}

.filter-button {
  background-color: #587ef4;
  margin-left: 2rem;
  color: #fff;
  border: none;
  padding: 1rem 2.8rem; /* Adjust padding for larger text */
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
  font-weight: bold; /* Add boldness for emphasis */
}

.filter-button:hover {
  background-color: #4169e1;
}
.History{
    /* border: 2px solid red; */
    margin-top: 2rem;
    height: 100%;
}
.History {
    margin-top: 20px;
    
    
    border-radius: 5px;
    padding: 10px;
}

.History h2 {
    margin: 0 0 10px 0;
    padding-bottom: 5px;
  
    color: #587ef4;
}
.list {
        background-color: whitesmoke;
        padding: 1.8em 1.2em;
        box-shadow: 0 0.6em 1.2em rgba(28, 0, 80, 0.06);
        border-radius: 0.6em;
        font-size:1.2rem;
        font-family: "Open Sans", sans-serif;
        font-optical-sizing: auto;
        font-weight: 600;
        font-style: normal;
        font-variation-settings:100;
          

    }

    .sublist-content {
        width: 100%;
        border-left: 0.3em solid #587ef4;
        margin-bottom: 0.6em;
        padding: 0.5em 1em;
        display: grid;
        grid-template-columns: 3fr 2fr 1fr 1fr;
    }

    .product {
        font-weight: 500;
        color: #363d55;
    }

    .amount {
        color: #414a67;
        margin-left: 20%;
    }

    .icons-container {
        width: 5em;
        margin: 1.2em;
        align-items: center;
    }

    .product-title {
        margin-bottom: 1em;
    }

.endsection-leftside{
  width: 50%;
  height: 10rem;
  /* border:2px solid red; */
}
</style>
<body>
    <div class="main-container">
        <header class="top-section">
            <h1>Expense Tracker</h1>
        </header>

        <main class="middle-section">
            <section class="graph-side">
                <canvas id="data" width="400" height="250"></canvas>
            </section>

            <section class="info-side">
                <div class="title-section">
                    <h1>Transactions:-</h1>
                      <div class="Expense_values">
                        <h1 id="Expense_Done"></h1>
                        <h1 id="Amount_Saved"></h1>
                      </div>
                </div>

                
                <div class="list">
                    <h1>History</h1>
                    <div class="list-container" id="list"></div>
                </div>
            </section>
        </main>
          
    </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/he/1.2.0/he.min.js"></script>

<script>
  const moneyExpenseSpan=document.getElementById('Expense_Done')
  const savedSpan = document.getElementById('Amount_Saved');
 const Canvas_Chart = document.getElementById('data');
 const CTX = new Chart(Canvas_Chart, {
    type: 'bar',
    data: {
        labels: [], // Empty array for labels
        datasets: [{
            label: 'Expense Data', // Label for the dataset
            data: [], // Empty array for data
            backgroundColor:['rgba(54, 162, 235, 0.6)'], // Background color for the bars
            borderWidth: 1 // Border width for the bars
        }]
    },
    options: {
        plugins: {
            title: {
                display: true,
                text: 'Number OF Days', // Title for the chart
                font: {
                    family: 'Arial', // Font family for the title
                    size: 20, // Font size for the title
                    weight: 'bold' // Font weight for the title
                }
            }
        },
        scales: {
            y: { // Y-axis configuration
                min: 0, // Minimum value for the y-axis
                grid: {
                    display: true,
                    color: 'rgba(0, 0, 0, 0.1)' // Color for the grid lines
                },
                ticks: {
                    font: {
                        size: 14, // Font size for the ticks
                        weight: 'bold' // Font weight for the ticks
                    }
                }
            },
            x: { // X-axis configuration
                ticks: {
                    font: {
                        size: 14, // Font size for the ticks
                        weight: 'bold' // Font weight for the ticks
                    }
                }
            }
        }
    }
});



function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }


 const parsedData = <%- JSON.stringify(userData) %>;
const data=JSON.parse(parsedData)
let i=0;
let j=0
let expense=0;
let saved=0;
let Days=0;
let notes=[]

const filteredData = {};
const Category=['Home','Food','Clothes','Car','Pets','Health','Travel','Gifts','EatingOut']

Object.keys(data).forEach(date => {

  const filteredEntries = {};
      
  
  Object.keys(data[date]).forEach(category => {
   
    Days++
    // console.log(category)
    const filteredCategoryEntries = data[date][category].filter(entry => {
        
      
      let parseData=JSON.parse(entry)
       

      let len=parseData.length-1
      saved+=parseData[len].moneySaved
      parseData.pop(parseData[len])
    
      // CTX.options.plugins.title.text += ` (${numDays} Days)`
      for (let i = 0; i < parseData.length; i++) {
        
    const track = parseData[i];
       
    for (let key in track) {
        const value = track[key];
      // console.log(track)
        let color=getRandomColor()
          if(value.length!=0){
            console.log(value)
            notes.push(track)
            // console.log(notes)
              expense+=value[0].cost
              
              if(CTX.data.labels.length==0){
                  CTX.data.labels.push(key)
                
                  CTX.data.datasets[0].data.push(value[0].cost)
                  CTX.update()
              }
                else{
                    if(CTX.data.labels.includes(key)){
                      let indexNum=CTX.data.labels.indexOf(key)
                 
                      CTX.data.datasets[0].data[indexNum]=CTX.data.datasets[0].data[indexNum] + value[0].cost
                      
                      CTX.update()
                    }
                    else{
                      CTX.data.labels.push(key)
                      CTX.data.datasets[0].data.push(value[0].cost)
                    
                      CTX.data.datasets[0].backgroundColor.push(color)
                      CTX.update()

                    }
                 
                  }
                }
                  
                   
                     


            
          
          }
        }
    }
   )
   }
   )
  }
  )
  if(Days==7){
    console.log(CTX.options.plugins.title.text += ` (1 Week)`)
  }
  else if(Days==14){
    console.log(CTX.options.plugins.title.text += ` (2 Week)`)
  }
  else if (Days==21){
    console.log(CTX.options.plugins.title.text += ` (3 Week)`)
  }
  else if(Days==30 || Days ==31){
    console.log(CTX.options.plugins.title.text += ` (1 Month)`)
  }
  else{
    console.log(CTX.options.plugins.title.text += ` (${Days} Days)`)

  }
    
  CTX.update()
  
   moneyExpenseSpan.innerText=`Expense:-${expense}`
   savedSpan.innerText=`Money Saved:-${saved}`
// Event listener for click events on the canvas
    Canvas_Chart.addEventListener('click', function(event) {
    const elements = CTX.getElementsAtEventForMode(event, 'nearest', {intersect: true});

    if (elements && elements.length > 0) {
      
        const datasetIndex = elements[0].datasetIndex;
        
     
        const index = elements[0].index;

        
        const clickedLabel = CTX.data.labels[index];
        getNote(clickedLabel,index)

          
        
    }
});

function getNote(clickedLabel, No = 0) {
    let expense_Info_And_Notes = [];
    
  
    notes.forEach(note => {
        if (note.hasOwnProperty(clickedLabel)) {
            let category = note[clickedLabel];
            console.log(category)
            // if (!expense_Info_And_Notes.hasOwnProperty(category)) {
            //     expense_Info_And_Notes[category] = [];
            // }
            expense_Info_And_Notes.push(note);
            
        }
    });
    
  
    const list = document.getElementById("list");
    list.innerHTML = '';

  expense_Info_And_Notes.forEach(item => {
    console.log(item[clickedLabel][0])
    let sublistContent = document.createElement("div");
    sublistContent.style.marginTop = "2rem";
    sublistContent.classList.add("sublist-content", "flex-space");

   
    let innercontent = document.createElement('div');
    innercontent.style.display = 'block';

  
    let expenseNameParagraph = document.createElement("p");
    expenseNameParagraph.textContent = item[clickedLabel][0].expenseName;
    expenseNameParagraph.classList.add("product");
    expenseNameParagraph.style.display='inline-block'

    let expenseCostParagraph = document.createElement("p");
    expenseCostParagraph.textContent = `${item[clickedLabel][0].cost}₹`;
    expenseCostParagraph.classList.add("amount");
    expenseCostParagraph.style.display='inline-block'
    innercontent.appendChild(expenseNameParagraph);
    innercontent.appendChild(expenseCostParagraph);

    sublistContent.appendChild(innercontent);

    list.appendChild(sublistContent);
});

}      

      // getNote()
</script>
</html>